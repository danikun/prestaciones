@page "/reclamaciones/{Id:guid}"
@rendermode InteractiveServer
@using Prestaciones.Web.Models
@using Prestaciones.Web.Services
@inject ReclamacionPreviaService ReclamacionService
@inject DocumentoResolucionService DocumentoService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Detalle de Reclamación</PageTitle>

<div class="container">
    <h1>Detalle de Reclamación</h1>

    @if (reclamacion == null)
    {
        <p>Cargando...</p>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Información de la Reclamación</h5>
                        <div class="mb-3">
                            <strong>Documento:</strong>
                            <button class="btn btn-link" @onclick="DescargarDocumento">
                                <i class="bi bi-download"></i> Descargar documento
                            </button>
                        </div>
                        <div class="mb-3">
                            <strong>Fecha Entrada:</strong> @reclamacion.FechaEntrada.ToLocalTime().ToString("g")
                        </div>
                        <div class="mb-3">
                            <strong>Estado:</strong> @reclamacion.Estado
                        </div>

                        @if (reclamacion.Estado != "Pendiente")
                        {
                            <div class="mb-3">
                                <strong>Fecha Resolución:</strong> @reclamacion.FechaResolucion?.ToLocalTime().ToString("g")
                            </div>
                            <div class="mb-3">
                                <strong>Motivo Resolución:</strong>
                                <p class="mt-2">@reclamacion.MotivoResolucion</p>
                            </div>
                            <div class="mb-3">
                                <button class="btn btn-primary" @onclick="GenerarPdf">
                                    <i class="bi bi-file-pdf"></i> Generar PDF
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <h5>Resolver Reclamación</h5>
                                <div class="form-group">
                                    <label class="form-label">Estado:</label>
                                    <select class="form-select" @bind="estadoResolucion">
                                        <option value="Aceptada">Aceptada</option>
                                        <option value="AceptadaParcialmente">Aceptada Parcialmente</option>
                                        <option value="Desestimada">Desestimada</option>
                                    </select>
                                </div>
                                <div class="form-group mt-3">
                                    <label class="form-label">Motivo de la resolución:</label>
                                    <textarea class="form-control" @bind="motivoResolucion" rows="4"></textarea>
                                </div>
                                <button class="btn btn-primary mt-3" @onclick="ResolverReclamacion">
                                    Resolver Reclamación
                                </button>
                            </div>
                        }
                    </div>
                </div>

                <div class="mt-3">
                    <a href="/reclamaciones" class="btn btn-secondary">Volver al listado</a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private ReclamacionPrevia? reclamacion;
    private string estadoResolucion = "Aceptada";
    private string? motivoResolucion;

    protected override async Task OnInitializedAsync()
    {
        await CargarReclamacion();
    }

    private async Task CargarReclamacion()
    {
        reclamacion = await ReclamacionService.GetReclamacion(Id);
    }

    private async Task ResolverReclamacion()
    {
        if (string.IsNullOrEmpty(motivoResolucion))
        {
            return;
        }

        await ReclamacionService.ResolverReclamacion(Id, estadoResolucion, motivoResolucion);
        await CargarReclamacion();
    }

    private async Task GenerarPdf()
    {
        if (reclamacion == null) return;

        var pdfBytes = DocumentoService.GenerarPdfResolucion(reclamacion);
        var fileName = $"resolucion_{reclamacion.Id}.pdf";
        
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, Convert.ToBase64String(pdfBytes));
    }

    private async Task DescargarDocumento()
    {
        if (reclamacion == null) return;

        try
        {
            var stream = await ReclamacionService.DescargarDocumento(Id);
            var nombreArchivo = reclamacion.RutaDocumento.Split('/').Last();
            var bytes = new byte[stream.Length];
            await stream.ReadAsync(bytes);
            
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", nombreArchivo, Convert.ToBase64String(bytes));
        }
        catch (Exception ex)
        {
            // Aquí podrías mostrar un mensaje de error al usuario
            Console.WriteLine($"Error al descargar el documento: {ex.Message}");
        }
    }
} 